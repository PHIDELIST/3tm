AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation template for TM web application infrastructure with Amazon DocumentDB, EC2, Load Balancer, Auto Scaling, VPC, and CloudFront.

Parameters:
  InstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t3.micro
    Description: EC2 instance type
  KeyPair:
    Description: Name of an existing EC2 KeyPair for SSH access to the EC2 instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.
  MasterUsername:
    Type: String
    Default: admin
    Description: DocumentDB master username
  MasterUserPassword:
    Type: String
    NoEcho: true
    Description: DocumentDB master password

Resources:

  TMVPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.0.0.0/16
        EnableDnsSupport: true
        EnableDnsHostnames: true
        Tags:
          - Key: Name
            Value: TM-VPC

  TMPublicSubnet1:
      Type: AWS::EC2::Subnet
      Properties: 
        VpcId: !Ref TMVPC
        CidrBlock: 10.0.1.0/24
        AvailabilityZone: !Select [0, !GetAZs '']
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: TM-PublicSubnet1

  TMPublicSubnet2:
      Type: AWS::EC2::Subnet
      Properties: 
        VpcId: !Ref TMVPC
        CidrBlock: 10.0.2.0/24
        AvailabilityZone: !Select [1, !GetAZs '']
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: TM-PublicSubnet2

  TMPrivateSubnet1:
      Type: AWS::EC2::Subnet
      Properties: 
        VpcId: !Ref TMVPC
        CidrBlock: 10.0.3.0/24
        AvailabilityZone: !Select [0, !GetAZs '']
        Tags:
          - Key: Name
            Value: TM-PrivateSubnet1

  TMPrivateSubnet2:
      Type: AWS::EC2::Subnet
      Properties: 
        VpcId: !Ref TMVPC
        CidrBlock: 10.0.4.0/24
        AvailabilityZone: !Select [1, !GetAZs '']
        Tags:
          - Key: Name
            Value: TM-PrivateSubnet2

  TMInternetGateway:
      Type: AWS::EC2::InternetGateway

  TMAttachGateway:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId: !Ref TMVPC
        InternetGatewayId: !Ref TMInternetGateway

  TMRouteTable:
      Type: AWS::EC2::RouteTable
      Properties: 
        VpcId: !Ref TMVPC
        Tags:
          - Key: Name
            Value: TM-RouteTable

  TMPublicRoute:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId: !Ref TMRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref TMInternetGateway

  TMRouteTableAssociation1:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref TMPublicSubnet1
        RouteTableId: !Ref TMRouteTable

  TMRouteTableAssociation2:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref TMPublicSubnet2
        RouteTableId: !Ref TMRouteTable

    ###SG##
  TMWebServerSG:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group to Allow HTTP and SSH access
        VpcId: !Ref TMVPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
        Tags:
          - Key: Name
            Value: TM-WebServerSG

  TMDocumentDBSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group for TM DocumentDB - Access for EC2 instances
        VpcId: !Ref TMVPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 27017
            ToPort: 27017
            SourceSecurityGroupId: !Ref TMWebServerSG
        Tags:
          - Key: Name
            Value: TM-DocumentDB-SG

    ### Launch Template ###
  TMLaunchTemplate:
      Type: AWS::EC2::LaunchTemplate
      Properties:
        LaunchTemplateName: TM-WebServerLaunchTemplate
        LaunchTemplateData:
          InstanceType: !Ref InstanceType
          ImageId: ami-0dc2d3e4c0f9ebd18
          SecurityGroupIds:
            - !Ref TMWebServerSG
          KeyName: !Ref KeyPair
          UserData:
            Fn::Base64: !Sub |
              #!/bin/bash
              # Update the system
              yum update -y

              # Install Git
              yum install -y git

              # Install Node.js and NPM
              curl -sL https://rpm.nodesource.com/setup_14.x | bash -
              yum install -y nodejs

              # Install PM2 globally
              npm install pm2 -g

              # Install and configure Nginx
              amazon-linux-extras install nginx1.12 -y
              systemctl start nginx
              systemctl enable nginx

              # Nginx configuration to serve the React app
              cat > /etc/nginx/nginx.conf << 'EOF'
              user nginx;
              worker_processes auto;
              error_log /var/log/nginx/error.log;
              pid /run/nginx.pid;

              events {
                  worker_connections 1024;
              }

              http {
                  include       /etc/nginx/mime.types;
                  default_type  application/octet-stream;
                  sendfile        on;
                  keepalive_timeout 65;

                  server {
                      listen 80;
                      server_name localhost;

                      location / {
                          root   /usr/share/nginx/html;
                          index  index.html index.htm;
                          try_files $uri $uri/ /index.html;
                      }
                  }
              }
              EOF

              # Restart Nginx to apply the configuration
              systemctl restart nginx

              # Ensure PM2 is set up to restart on server reboot
              pm2 startup systemd


          TagSpecifications:
            - ResourceType: instance
              Tags:
                - Key: Name
                  Value: TM-WebServerInstance

    ### Auto Scaling Group ###
  TMAutoScalingGroup:
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
        LaunchTemplate:
          LaunchTemplateId: !Ref TMLaunchTemplate
          Version: !GetAtt TMLaunchTemplate.LatestVersionNumber 
        MinSize: 1
        MaxSize: 2
        DesiredCapacity: 1
        VPCZoneIdentifier:
          - !Ref TMPublicSubnet1
          - !Ref TMPublicSubnet2
        TargetGroupARNs:
          - !Ref TMTargetGroup

    ### Load Balancer ###
  TMLoadBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Name: TM-LoadBalancer
        Subnets: 
          - !Ref TMPublicSubnet1
          - !Ref TMPublicSubnet2
        SecurityGroups:
          - !Ref TMWebServerSG
        Scheme: internet-facing
        Tags:
          - Key: Name
            Value: TM-LoadBalancer

  TMListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        LoadBalancerArn: !Ref TMLoadBalancer
        Protocol: HTTP
        Port: 80
        DefaultActions:
          - Type: forward
            TargetGroupArn: !Ref TMTargetGroup

  TMTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        VpcId: !Ref TMVPC
        Port: 80
        Protocol: HTTP
        TargetType: instance
        HealthCheckProtocol: HTTP
        HealthCheckPort: 80
        Tags:
          - Key: Name
            Value: TM-TargetGroup

  TMCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: !GetAtt TMLoadBalancer.DNSName
              Id: tmloadbalancerorigin
              CustomOriginConfig:
                HTTPPort: 80
                OriginProtocolPolicy: match-viewer
          Enabled: true
          DefaultCacheBehavior:
            TargetOriginId: tmloadbalancerorigin
            ViewerProtocolPolicy: redirect-to-https
            ForwardedValues:
              QueryString: false
          ViewerCertificate:
            CloudFrontDefaultCertificate: true
        Tags:
          - Key: Name
            Value: TM-CloudFrontDistribution

    ### DocumentDB ###
  TMDocumentDBSubnetGroup:
      Type: AWS::DocDB::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: DocumentDB Subnet Group
        SubnetIds:
          - !Ref TMPrivateSubnet1
          - !Ref TMPrivateSubnet2
        DBSubnetGroupName: documentdb-subnet-group-phidel
        Tags:
          - Key: Name
            Value: TM-DocumentDB-SubnetGroup

  TMDocumentDBInstance:
      Type: AWS::DocDB::DBInstance
      Properties:
        DBInstanceClass: db.t3.medium
        DBClusterIdentifier: !Ref TMDocumentDBCluster
        Tags:
          - Key: Name
            Value: TM-DocumentDB-Instance

  TMDocumentDBCluster:
    Type: AWS::DocDB::DBCluster
    Properties:
      EngineVersion: '4.0.0'
      DBClusterIdentifier: tm-documentdb-cluster
      MasterUsername: !Ref MasterUsername
      MasterUserPassword: !Ref MasterUserPassword
      VpcSecurityGroupIds:
        - !Ref TMDocumentDBSecurityGroup
      DBSubnetGroupName: !Ref TMDocumentDBSubnetGroup
      Tags:
        - Key: Name
          Value: TM-DocumentDB-Cluster

Outputs:
  TMWebsiteURL:
      Value: !Sub 'http://${TMLoadBalancer.DNSName}'
      Description: The URL of the TM web application.
  TMDocumentDBClusterEndpoint:
      Value: !GetAtt TMDocumentDBCluster.Endpoint
      Description: The endpoint for the TM DocumentDB cluster.
